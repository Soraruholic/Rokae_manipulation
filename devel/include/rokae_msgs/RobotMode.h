// Generated by gencpp from file rokae_msgs/RobotMode.msg
// DO NOT EDIT!


#ifndef ROKAE_MSGS_MESSAGE_ROBOTMODE_H
#define ROKAE_MSGS_MESSAGE_ROBOTMODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rokae_msgs
{
template <class ContainerAllocator>
struct RobotMode_
{
  typedef RobotMode_<ContainerAllocator> Type;

  RobotMode_()
    : timestamp(0.0)
    , is_robot_connected(false)
    , is_real_robot_enabled(false)
    , is_robot_power_on(false)
    , is_robot_running(false)
    , is_program_running(false)
    , is_emergency_stopped(false)  {
    }
  RobotMode_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , is_robot_connected(false)
    , is_real_robot_enabled(false)
    , is_robot_power_on(false)
    , is_robot_running(false)
    , is_program_running(false)
    , is_emergency_stopped(false)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _is_robot_connected_type;
  _is_robot_connected_type is_robot_connected;

   typedef uint8_t _is_real_robot_enabled_type;
  _is_real_robot_enabled_type is_real_robot_enabled;

   typedef uint8_t _is_robot_power_on_type;
  _is_robot_power_on_type is_robot_power_on;

   typedef uint8_t _is_robot_running_type;
  _is_robot_running_type is_robot_running;

   typedef uint8_t _is_program_running_type;
  _is_program_running_type is_program_running;

   typedef uint8_t _is_emergency_stopped_type;
  _is_emergency_stopped_type is_emergency_stopped;





  typedef boost::shared_ptr< ::rokae_msgs::RobotMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rokae_msgs::RobotMode_<ContainerAllocator> const> ConstPtr;

}; // struct RobotMode_

typedef ::rokae_msgs::RobotMode_<std::allocator<void> > RobotMode;

typedef boost::shared_ptr< ::rokae_msgs::RobotMode > RobotModePtr;
typedef boost::shared_ptr< ::rokae_msgs::RobotMode const> RobotModeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rokae_msgs::RobotMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rokae_msgs::RobotMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rokae_msgs::RobotMode_<ContainerAllocator1> & lhs, const ::rokae_msgs::RobotMode_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.is_robot_connected == rhs.is_robot_connected &&
    lhs.is_real_robot_enabled == rhs.is_real_robot_enabled &&
    lhs.is_robot_power_on == rhs.is_robot_power_on &&
    lhs.is_robot_running == rhs.is_robot_running &&
    lhs.is_program_running == rhs.is_program_running &&
    lhs.is_emergency_stopped == rhs.is_emergency_stopped;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rokae_msgs::RobotMode_<ContainerAllocator1> & lhs, const ::rokae_msgs::RobotMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rokae_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rokae_msgs::RobotMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokae_msgs::RobotMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rokae_msgs::RobotMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rokae_msgs::RobotMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokae_msgs::RobotMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokae_msgs::RobotMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rokae_msgs::RobotMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37b92b84717583128a825ed4248ac20e";
  }

  static const char* value(const ::rokae_msgs::RobotMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37b92b8471758312ULL;
  static const uint64_t static_value2 = 0x8a825ed4248ac20eULL;
};

template<class ContainerAllocator>
struct DataType< ::rokae_msgs::RobotMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rokae_msgs/RobotMode";
  }

  static const char* value(const ::rokae_msgs::RobotMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rokae_msgs::RobotMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This is for robot state mode structure\n"
"float64 timestamp\n"
"bool is_robot_connected\n"
"bool is_real_robot_enabled\n"
"bool is_robot_power_on\n"
"bool is_robot_running\n"
"bool is_program_running\n"
"bool is_emergency_stopped\n"
;
  }

  static const char* value(const ::rokae_msgs::RobotMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rokae_msgs::RobotMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.is_robot_connected);
      stream.next(m.is_real_robot_enabled);
      stream.next(m.is_robot_power_on);
      stream.next(m.is_robot_running);
      stream.next(m.is_program_running);
      stream.next(m.is_emergency_stopped);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rokae_msgs::RobotMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rokae_msgs::RobotMode_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "is_robot_connected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_robot_connected);
    s << indent << "is_real_robot_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_real_robot_enabled);
    s << indent << "is_robot_power_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_robot_power_on);
    s << indent << "is_robot_running: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_robot_running);
    s << indent << "is_program_running: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_program_running);
    s << indent << "is_emergency_stopped: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_emergency_stopped);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROKAE_MSGS_MESSAGE_ROBOTMODE_H
